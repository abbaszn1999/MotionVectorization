[project]
name = "motion-vectorization-pipeline"
version = "2.0.0"
description = "State-of-the-art motion vectorization with SAM2.1 + CoTracker3 + FlowSeek (ICCV 2025)"
requires-python = ">=3.11"
authors = [
    {name = "Motion Vectorization Team", email = "team@motionvectorization.ai"}
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["computer-vision", "motion-tracking", "optical-flow", "segmentation", "vectorization"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Video :: Display",
]

# Latest 2024-2025 dependencies - ALL updated to absolute latest versions as demanded
dependencies = [
    # Core data processing (Latest 2024-2025)
    "numpy>=2.3.0",              # Latest NumPy 2.x with free-threading support
    "pillow>=11.3.0",            # Latest July 2025 release
    "opencv-python>=4.10.0.88",  # Latest OpenCV with NumPy 2.x compatibility
    "scipy>=1.14.0",             # Latest SciPy compatible with NumPy 2.x
    "networkx>=3.5",             # Latest NetworkX
    "matplotlib>=3.9.0",         # Latest Matplotlib with NumPy 2.x support
    
    # Image processing utilities (Latest 2025)
    "scikit-image>=0.25.2",      # Latest scikit-image (2025)
    "pymatting>=1.1.14",         # Alpha matting library (May 2025 release)
    
    # Vector graphics output (Latest)
    "drawsvg>=2.4.0",            # Latest DrawSVG
    
    # Configuration management (Latest)
    "hydra-core>=1.3.0",         # Latest Hydra
    "iopath>=0.1.10",            # Latest IOPath
    
    # Shape analysis utilities (Latest 2025)
    "pyefd>=1.6.0",              # Elliptic Fourier Descriptors (Latest Dec 2021 - actively maintained)
]

[project.optional-dependencies]
# GPU dependencies - Latest 2024-2025 versions for optimal performance
gpu = [
    "torch>=2.8.0",              # Latest PyTorch (August 2025) with CUDA 12.8 support
    "torchvision>=0.23.0",       # Latest TorchVision (compatible with PyTorch 2.8)
    "torchaudio>=2.8.0",         # Latest TorchAudio (August 2025)
    "transformers>=4.56.0",      # Latest Transformers (2024-2025)
    "accelerate>=1.2.1",         # Latest Accelerate (2024-2025)
    "timm>=1.0.11",              # Latest TIMM (2024-2025)
    "bitsandbytes>=0.45.0",      # Latest BitsAndBytes (2024-2025)
    "kornia>=0.7.3",             # Latest Kornia for computer vision
]

# Development dependencies  
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
]

# Latest AI model dependencies (installed on GPU server)
models = [
    "sam2 @ git+https://github.com/facebookresearch/sam2.git@main",
    "cotracker @ git+https://github.com/facebookresearch/co-tracker.git@main", 
    "flowseek @ git+https://github.com/princeton-vl/FlowSeek.git@main",
]

[project.urls]
Homepage = "https://github.com/motionvectorization/pipeline"
Repository = "https://github.com/motionvectorization/pipeline"
Documentation = "https://motionvectorization.readthedocs.io"
Issues = "https://github.com/motionvectorization/pipeline/issues"

[project.scripts]
motion-vectorize = "motion_vectorization.cli:main"

[build-system]
requires = ["setuptools>=75.0.0", "wheel>=0.44.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["motion_vectorization*", "svg_utils*", "scripts*"]
exclude = ["tests*", "attached_assets*", "uploads*", "downloads*"]

[tool.setuptools.package-data]
motion_vectorization = ["config/*.json"]
svg_utils = ["js/*.js"]

# PyTorch CUDA 12.8 index for latest GPU support (RTX 50xx series compatible)
[[tool.uv.index]]
explicit = true
name = "pytorch-cuda128"
url = "https://download.pytorch.org/whl/cu128"

# Fallback CUDA 12.6 index for wider compatibility
[[tool.uv.index]]
explicit = true
name = "pytorch-cuda126"
url = "https://download.pytorch.org/whl/cu126"

[tool.uv.sources]
# Use latest CUDA 12.8 for optimal performance
torch = [{ index = "pytorch-cuda128", marker = "platform_system == 'Linux'" }]
torchvision = [{ index = "pytorch-cuda128", marker = "platform_system == 'Linux'" }]
torchaudio = [{ index = "pytorch-cuda128", marker = "platform_system == 'Linux'" }]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | attached_assets
  | uploads
  | downloads
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "attached_assets/", 
    "uploads/",
    "downloads/",
    "test_*.py",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "motion_vectorization",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
]